// Code generated by protoc-gen-go. DO NOT EDIT.
// source: profiles.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RatePolicy int32

const (
	// Drop
	RatePolicy_DROP RatePolicy = 0
	// Mark
	RatePolicy_MARK RatePolicy = 1
)

var RatePolicy_name = map[int32]string{
	0: "DROP",
	1: "MARK",
}
var RatePolicy_value = map[string]int32{
	"DROP": 0,
	"MARK": 1,
}

func (x RatePolicy) String() string {
	return proto.EnumName(RatePolicy_name, int32(x))
}
func (RatePolicy) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

type ServiceProfile struct {
	ServiceProfileID       string     `protobuf:"bytes,1,opt,name=serviceProfileID" json:"serviceProfileID,omitempty"`
	UlRate                 uint32     `protobuf:"varint,2,opt,name=ulRate" json:"ulRate,omitempty"`
	UlBucketSize           uint32     `protobuf:"varint,3,opt,name=ulBucketSize" json:"ulBucketSize,omitempty"`
	UlRatePolicy           RatePolicy `protobuf:"varint,4,opt,name=ulRatePolicy,enum=api.RatePolicy" json:"ulRatePolicy,omitempty"`
	DlRate                 uint32     `protobuf:"varint,5,opt,name=dlRate" json:"dlRate,omitempty"`
	DlBucketSize           uint32     `protobuf:"varint,6,opt,name=dlBucketSize" json:"dlBucketSize,omitempty"`
	DlRatePolicy           RatePolicy `protobuf:"varint,7,opt,name=dlRatePolicy,enum=api.RatePolicy" json:"dlRatePolicy,omitempty"`
	AddGWMetadata          bool       `protobuf:"varint,8,opt,name=addGWMetadata" json:"addGWMetadata,omitempty"`
	DevStatusReqFreq       uint32     `protobuf:"varint,9,opt,name=devStatusReqFreq" json:"devStatusReqFreq,omitempty"`
	ReportDevStatusBattery bool       `protobuf:"varint,10,opt,name=reportDevStatusBattery" json:"reportDevStatusBattery,omitempty"`
	ReportDevStatusMargin  bool       `protobuf:"varint,11,opt,name=reportDevStatusMargin" json:"reportDevStatusMargin,omitempty"`
	DrMin                  uint32     `protobuf:"varint,12,opt,name=drMin" json:"drMin,omitempty"`
	DrMax                  uint32     `protobuf:"varint,13,opt,name=drMax" json:"drMax,omitempty"`
	ChannelMask            []byte     `protobuf:"bytes,14,opt,name=channelMask,proto3" json:"channelMask,omitempty"`
	PrAllowed              bool       `protobuf:"varint,15,opt,name=prAllowed" json:"prAllowed,omitempty"`
	HrAllowed              bool       `protobuf:"varint,16,opt,name=hrAllowed" json:"hrAllowed,omitempty"`
	RaAllowed              bool       `protobuf:"varint,17,opt,name=raAllowed" json:"raAllowed,omitempty"`
	NwkGeoLoc              bool       `protobuf:"varint,18,opt,name=nwkGeoLoc" json:"nwkGeoLoc,omitempty"`
	TargetPER              uint32     `protobuf:"varint,19,opt,name=targetPER" json:"targetPER,omitempty"`
	MinGWDiversity         uint32     `protobuf:"varint,20,opt,name=minGWDiversity" json:"minGWDiversity,omitempty"`
}

func (m *ServiceProfile) Reset()                    { *m = ServiceProfile{} }
func (m *ServiceProfile) String() string            { return proto.CompactTextString(m) }
func (*ServiceProfile) ProtoMessage()               {}
func (*ServiceProfile) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *ServiceProfile) GetServiceProfileID() string {
	if m != nil {
		return m.ServiceProfileID
	}
	return ""
}

func (m *ServiceProfile) GetUlRate() uint32 {
	if m != nil {
		return m.UlRate
	}
	return 0
}

func (m *ServiceProfile) GetUlBucketSize() uint32 {
	if m != nil {
		return m.UlBucketSize
	}
	return 0
}

func (m *ServiceProfile) GetUlRatePolicy() RatePolicy {
	if m != nil {
		return m.UlRatePolicy
	}
	return RatePolicy_DROP
}

func (m *ServiceProfile) GetDlRate() uint32 {
	if m != nil {
		return m.DlRate
	}
	return 0
}

func (m *ServiceProfile) GetDlBucketSize() uint32 {
	if m != nil {
		return m.DlBucketSize
	}
	return 0
}

func (m *ServiceProfile) GetDlRatePolicy() RatePolicy {
	if m != nil {
		return m.DlRatePolicy
	}
	return RatePolicy_DROP
}

func (m *ServiceProfile) GetAddGWMetadata() bool {
	if m != nil {
		return m.AddGWMetadata
	}
	return false
}

func (m *ServiceProfile) GetDevStatusReqFreq() uint32 {
	if m != nil {
		return m.DevStatusReqFreq
	}
	return 0
}

func (m *ServiceProfile) GetReportDevStatusBattery() bool {
	if m != nil {
		return m.ReportDevStatusBattery
	}
	return false
}

func (m *ServiceProfile) GetReportDevStatusMargin() bool {
	if m != nil {
		return m.ReportDevStatusMargin
	}
	return false
}

func (m *ServiceProfile) GetDrMin() uint32 {
	if m != nil {
		return m.DrMin
	}
	return 0
}

func (m *ServiceProfile) GetDrMax() uint32 {
	if m != nil {
		return m.DrMax
	}
	return 0
}

func (m *ServiceProfile) GetChannelMask() []byte {
	if m != nil {
		return m.ChannelMask
	}
	return nil
}

func (m *ServiceProfile) GetPrAllowed() bool {
	if m != nil {
		return m.PrAllowed
	}
	return false
}

func (m *ServiceProfile) GetHrAllowed() bool {
	if m != nil {
		return m.HrAllowed
	}
	return false
}

func (m *ServiceProfile) GetRaAllowed() bool {
	if m != nil {
		return m.RaAllowed
	}
	return false
}

func (m *ServiceProfile) GetNwkGeoLoc() bool {
	if m != nil {
		return m.NwkGeoLoc
	}
	return false
}

func (m *ServiceProfile) GetTargetPER() uint32 {
	if m != nil {
		return m.TargetPER
	}
	return 0
}

func (m *ServiceProfile) GetMinGWDiversity() uint32 {
	if m != nil {
		return m.MinGWDiversity
	}
	return 0
}

type DeviceProfile struct {
	DeviceProfileID    string   `protobuf:"bytes,1,opt,name=deviceProfileID" json:"deviceProfileID,omitempty"`
	SupportsClassB     bool     `protobuf:"varint,2,opt,name=supportsClassB" json:"supportsClassB,omitempty"`
	ClassBTimeout      uint32   `protobuf:"varint,3,opt,name=classBTimeout" json:"classBTimeout,omitempty"`
	PingSlotPeriod     uint32   `protobuf:"varint,4,opt,name=pingSlotPeriod" json:"pingSlotPeriod,omitempty"`
	PingSlotDR         uint32   `protobuf:"varint,5,opt,name=pingSlotDR" json:"pingSlotDR,omitempty"`
	PingSlotFreq       uint32   `protobuf:"varint,6,opt,name=pingSlotFreq" json:"pingSlotFreq,omitempty"`
	SupportsClassC     bool     `protobuf:"varint,7,opt,name=supportsClassC" json:"supportsClassC,omitempty"`
	ClassCTimeout      uint32   `protobuf:"varint,8,opt,name=classCTimeout" json:"classCTimeout,omitempty"`
	MacVersion         string   `protobuf:"bytes,9,opt,name=macVersion" json:"macVersion,omitempty"`
	RegParamsRevision  string   `protobuf:"bytes,10,opt,name=regParamsRevision" json:"regParamsRevision,omitempty"`
	RxDelay1           uint32   `protobuf:"varint,11,opt,name=rxDelay1" json:"rxDelay1,omitempty"`
	RxDROffset1        uint32   `protobuf:"varint,12,opt,name=rxDROffset1" json:"rxDROffset1,omitempty"`
	RxDataRate2        uint32   `protobuf:"varint,13,opt,name=rxDataRate2" json:"rxDataRate2,omitempty"`
	RxFreq2            uint32   `protobuf:"varint,14,opt,name=rxFreq2" json:"rxFreq2,omitempty"`
	FactoryPresetFreqs []uint32 `protobuf:"varint,15,rep,packed,name=factoryPresetFreqs" json:"factoryPresetFreqs,omitempty"`
	MaxEIRP            uint32   `protobuf:"varint,16,opt,name=maxEIRP" json:"maxEIRP,omitempty"`
	MaxDutyCycle       uint32   `protobuf:"varint,17,opt,name=maxDutyCycle" json:"maxDutyCycle,omitempty"`
	SupportsJoin       bool     `protobuf:"varint,18,opt,name=supportsJoin" json:"supportsJoin,omitempty"`
	RfRegion           string   `protobuf:"bytes,19,opt,name=rfRegion" json:"rfRegion,omitempty"`
	Supports32BitFCnt  bool     `protobuf:"varint,20,opt,name=supports32bitFCnt" json:"supports32bitFCnt,omitempty"`
}

func (m *DeviceProfile) Reset()                    { *m = DeviceProfile{} }
func (m *DeviceProfile) String() string            { return proto.CompactTextString(m) }
func (*DeviceProfile) ProtoMessage()               {}
func (*DeviceProfile) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *DeviceProfile) GetDeviceProfileID() string {
	if m != nil {
		return m.DeviceProfileID
	}
	return ""
}

func (m *DeviceProfile) GetSupportsClassB() bool {
	if m != nil {
		return m.SupportsClassB
	}
	return false
}

func (m *DeviceProfile) GetClassBTimeout() uint32 {
	if m != nil {
		return m.ClassBTimeout
	}
	return 0
}

func (m *DeviceProfile) GetPingSlotPeriod() uint32 {
	if m != nil {
		return m.PingSlotPeriod
	}
	return 0
}

func (m *DeviceProfile) GetPingSlotDR() uint32 {
	if m != nil {
		return m.PingSlotDR
	}
	return 0
}

func (m *DeviceProfile) GetPingSlotFreq() uint32 {
	if m != nil {
		return m.PingSlotFreq
	}
	return 0
}

func (m *DeviceProfile) GetSupportsClassC() bool {
	if m != nil {
		return m.SupportsClassC
	}
	return false
}

func (m *DeviceProfile) GetClassCTimeout() uint32 {
	if m != nil {
		return m.ClassCTimeout
	}
	return 0
}

func (m *DeviceProfile) GetMacVersion() string {
	if m != nil {
		return m.MacVersion
	}
	return ""
}

func (m *DeviceProfile) GetRegParamsRevision() string {
	if m != nil {
		return m.RegParamsRevision
	}
	return ""
}

func (m *DeviceProfile) GetRxDelay1() uint32 {
	if m != nil {
		return m.RxDelay1
	}
	return 0
}

func (m *DeviceProfile) GetRxDROffset1() uint32 {
	if m != nil {
		return m.RxDROffset1
	}
	return 0
}

func (m *DeviceProfile) GetRxDataRate2() uint32 {
	if m != nil {
		return m.RxDataRate2
	}
	return 0
}

func (m *DeviceProfile) GetRxFreq2() uint32 {
	if m != nil {
		return m.RxFreq2
	}
	return 0
}

func (m *DeviceProfile) GetFactoryPresetFreqs() []uint32 {
	if m != nil {
		return m.FactoryPresetFreqs
	}
	return nil
}

func (m *DeviceProfile) GetMaxEIRP() uint32 {
	if m != nil {
		return m.MaxEIRP
	}
	return 0
}

func (m *DeviceProfile) GetMaxDutyCycle() uint32 {
	if m != nil {
		return m.MaxDutyCycle
	}
	return 0
}

func (m *DeviceProfile) GetSupportsJoin() bool {
	if m != nil {
		return m.SupportsJoin
	}
	return false
}

func (m *DeviceProfile) GetRfRegion() string {
	if m != nil {
		return m.RfRegion
	}
	return ""
}

func (m *DeviceProfile) GetSupports32BitFCnt() bool {
	if m != nil {
		return m.Supports32BitFCnt
	}
	return false
}

func init() {
	proto.RegisterType((*ServiceProfile)(nil), "api.ServiceProfile")
	proto.RegisterType((*DeviceProfile)(nil), "api.DeviceProfile")
	proto.RegisterEnum("api.RatePolicy", RatePolicy_name, RatePolicy_value)
}

func init() { proto.RegisterFile("profiles.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 688 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x95, 0xdf, 0x4f, 0xdb, 0x30,
	0x10, 0xc7, 0xd7, 0x41, 0xa1, 0x35, 0xa4, 0x2d, 0x86, 0x21, 0x6b, 0x9a, 0xa6, 0x08, 0x4d, 0x53,
	0x85, 0xa6, 0x4a, 0x94, 0x69, 0xef, 0xd0, 0x00, 0x62, 0x5b, 0x45, 0xe4, 0x4e, 0xe3, 0xd9, 0x24,
	0xd7, 0x62, 0x91, 0xc6, 0xc1, 0x71, 0x4b, 0xb3, 0xff, 0x77, 0x2f, 0xfb, 0x2b, 0x26, 0x3b, 0x3f,
	0x48, 0x52, 0x78, 0xcb, 0x7d, 0xbe, 0x47, 0xee, 0x74, 0x7c, 0xda, 0xa2, 0x4e, 0x24, 0xc5, 0x94,
	0x07, 0x10, 0x0f, 0x22, 0x29, 0x94, 0xc0, 0x1b, 0x2c, 0xe2, 0x47, 0xff, 0x9a, 0xa8, 0x33, 0x01,
	0xb9, 0xe4, 0x1e, 0xb8, 0x69, 0x8c, 0x8f, 0x51, 0x2f, 0xae, 0x90, 0x6b, 0x87, 0x34, 0xec, 0x46,
	0xbf, 0x4d, 0xd7, 0x38, 0x3e, 0x44, 0x5b, 0x8b, 0x80, 0x32, 0x05, 0xe4, 0xad, 0xdd, 0xe8, 0x5b,
	0x34, 0xab, 0xf0, 0x11, 0xda, 0x5d, 0x04, 0xe7, 0x0b, 0xef, 0x01, 0xd4, 0x84, 0xff, 0x01, 0xb2,
	0x61, 0xd2, 0x0a, 0xc3, 0xa7, 0xba, 0x47, 0x77, 0xbb, 0x22, 0xe0, 0x5e, 0x42, 0x36, 0xed, 0x46,
	0xbf, 0x33, 0xec, 0x0e, 0x58, 0xc4, 0x07, 0xcf, 0x98, 0x56, 0x9a, 0xf4, 0x40, 0x3f, 0x1d, 0xd8,
	0x4c, 0x07, 0xfa, 0xc5, 0x40, 0xbf, 0x3c, 0x70, 0x2b, 0x1d, 0xe8, 0xd7, 0x06, 0xfa, 0xe5, 0x81,
	0xdb, 0xaf, 0x0c, 0x2c, 0x37, 0xe1, 0x4f, 0xc8, 0x62, 0xbe, 0x7f, 0x75, 0x3b, 0x06, 0xc5, 0x7c,
	0xa6, 0x18, 0x69, 0xd9, 0x8d, 0x7e, 0x8b, 0x56, 0xa1, 0xbe, 0x99, 0x0f, 0xcb, 0x89, 0x62, 0x6a,
	0x11, 0x53, 0x78, 0xbc, 0x94, 0xf0, 0x48, 0xda, 0x66, 0x85, 0x35, 0x8e, 0xbf, 0xa1, 0x43, 0x09,
	0x91, 0x90, 0xca, 0xc9, 0x93, 0x73, 0xa6, 0x14, 0xc8, 0x84, 0x20, 0xf3, 0xea, 0x57, 0x52, 0xfc,
	0x15, 0xbd, 0xab, 0x25, 0x63, 0x26, 0x67, 0x3c, 0x24, 0x3b, 0xe6, 0xcf, 0x5e, 0x0e, 0xf1, 0x01,
	0x6a, 0xfa, 0x72, 0xcc, 0x43, 0xb2, 0x6b, 0xd6, 0x49, 0x8b, 0x8c, 0xb2, 0x15, 0xb1, 0x0a, 0xca,
	0x56, 0xd8, 0x46, 0x3b, 0xde, 0x3d, 0x0b, 0x43, 0x08, 0xc6, 0x2c, 0x7e, 0x20, 0x1d, 0xbb, 0xd1,
	0xdf, 0xa5, 0x65, 0x84, 0x3f, 0xa0, 0x76, 0x24, 0xcf, 0x82, 0x40, 0x3c, 0x81, 0x4f, 0xba, 0x66,
	0xee, 0x33, 0xd0, 0xe9, 0x7d, 0x91, 0xf6, 0xd2, 0xf4, 0xbe, 0x9c, 0x4a, 0x96, 0xa7, 0x7b, 0x69,
	0x5a, 0x00, 0x9d, 0x86, 0x4f, 0x0f, 0x57, 0x20, 0x7e, 0x0a, 0x8f, 0xe0, 0x34, 0x2d, 0x80, 0x4e,
	0x15, 0x93, 0x33, 0x50, 0xee, 0x05, 0x25, 0xfb, 0x66, 0xe7, 0x67, 0x80, 0x3f, 0xa3, 0xce, 0x9c,
	0x87, 0x57, 0xb7, 0x0e, 0x5f, 0x82, 0x8c, 0xb9, 0x4a, 0xc8, 0x81, 0x69, 0xa9, 0xd1, 0xa3, 0xbf,
	0x4d, 0x64, 0x39, 0x50, 0x76, 0xbd, 0x8f, 0xba, 0x3e, 0xbc, 0xa4, 0x7a, 0x1d, 0xeb, 0x19, 0xf1,
	0x22, 0xd2, 0x17, 0x8e, 0x47, 0x01, 0x8b, 0xe3, 0x73, 0x63, 0x7c, 0x8b, 0xd6, 0xa8, 0xf6, 0xc5,
	0x33, 0x4f, 0xbf, 0xf8, 0x1c, 0xc4, 0x42, 0x65, 0xea, 0x57, 0xa1, 0x7e, 0x5b, 0xc4, 0xc3, 0xd9,
	0x24, 0x10, 0xca, 0x05, 0xc9, 0x85, 0x6f, 0xec, 0xb7, 0x68, 0x8d, 0xe2, 0x8f, 0x08, 0xe5, 0xc4,
	0xa1, 0x99, 0xf2, 0x25, 0xa2, 0xb5, 0xcf, 0x2b, 0xe3, 0x5c, 0xa6, 0x7d, 0x99, 0xad, 0x6d, 0x3e,
	0x32, 0xe2, 0xd7, 0x37, 0x1f, 0x15, 0x9b, 0x8f, 0xf2, 0xcd, 0x5b, 0xa5, 0xcd, 0x73, 0xa8, 0x37,
	0x9a, 0x33, 0xef, 0xb7, 0xbe, 0xa8, 0x08, 0x8d, 0xe3, 0x6d, 0x5a, 0x22, 0xf8, 0x0b, 0xda, 0x93,
	0x30, 0x73, 0x99, 0x64, 0xf3, 0x98, 0xc2, 0x92, 0x9b, 0x36, 0x64, 0xda, 0xd6, 0x03, 0xfc, 0x1e,
	0xb5, 0xe4, 0xca, 0x81, 0x80, 0x25, 0x27, 0x46, 0x63, 0x8b, 0x16, 0xb5, 0xb6, 0x51, 0xae, 0x1c,
	0x7a, 0x33, 0x9d, 0xc6, 0xa0, 0x4e, 0x32, 0x7f, 0xcb, 0x28, 0xeb, 0x60, 0x8a, 0xe9, 0xcf, 0xeb,
	0x30, 0x73, 0xb9, 0x8c, 0x30, 0x41, 0xdb, 0x72, 0xa5, 0xaf, 0x30, 0x34, 0x36, 0x5b, 0x34, 0x2f,
	0xf1, 0x00, 0xe1, 0x29, 0xf3, 0x94, 0x90, 0x89, 0x2b, 0x21, 0x06, 0x73, 0xaa, 0x98, 0x74, 0xed,
	0x8d, 0xbe, 0x45, 0x5f, 0x48, 0xf4, 0x9b, 0xe6, 0x6c, 0x75, 0x71, 0x4d, 0x5d, 0x63, 0xb6, 0x45,
	0xf3, 0x52, 0xff, 0x0f, 0xe6, 0x6c, 0xe5, 0x2c, 0x54, 0x32, 0x4a, 0xbc, 0x00, 0x8c, 0xda, 0x16,
	0xad, 0x30, 0xdd, 0x93, 0x5f, 0xfb, 0xbb, 0xe0, 0x61, 0x26, 0x78, 0x85, 0x99, 0x5b, 0x4c, 0x29,
	0xcc, 0xf4, 0xc1, 0xf6, 0xcd, 0xc1, 0x8a, 0x5a, 0x5f, 0x35, 0xef, 0x3d, 0x1d, 0xde, 0x71, 0x75,
	0x39, 0x0a, 0x95, 0x91, 0xbc, 0x45, 0xd7, 0x83, 0x63, 0x1b, 0xa1, 0xd2, 0x37, 0x58, 0x0b, 0x6d,
	0x3a, 0xf4, 0xc6, 0xed, 0xbd, 0xd1, 0x4f, 0xe3, 0x33, 0xfa, 0xa3, 0xd7, 0xb8, 0xdb, 0x32, 0x3f,
	0x01, 0xa7, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x1c, 0x5f, 0xca, 0x14, 0x06, 0x00, 0x00,
}
