// Code generated by protoc-gen-go. DO NOT EDIT.
// source: application.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type IntegrationKind int32

const (
	IntegrationKind_HTTP IntegrationKind = 0
)

var IntegrationKind_name = map[int32]string{
	0: "HTTP",
}
var IntegrationKind_value = map[string]int32{
	"HTTP": 0,
}

func (x IntegrationKind) String() string {
	return proto.EnumName(IntegrationKind_name, int32(x))
}
func (IntegrationKind) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type CreateApplicationRequest struct {
	// Name of the application (must be unique).
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Description of the application.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// ID of the organization to which the application belongs.
	OrganizationID int64 `protobuf:"varint,14,opt,name=organizationID" json:"organizationID,omitempty"`
	// ID of the service profile.
	ServiceProfileID string `protobuf:"bytes,15,opt,name=serviceProfileID" json:"serviceProfileID,omitempty"`
	// Payload codec.
	PayloadCodec string `protobuf:"bytes,16,opt,name=payloadCodec" json:"payloadCodec,omitempty"`
	// Payload encoder script.
	PayloadEncoderScript string `protobuf:"bytes,17,opt,name=payloadEncoderScript" json:"payloadEncoderScript,omitempty"`
	// Payload decoder script.
	PayloadDecoderScript string `protobuf:"bytes,18,opt,name=payloadDecoderScript" json:"payloadDecoderScript,omitempty"`
}

func (m *CreateApplicationRequest) Reset()                    { *m = CreateApplicationRequest{} }
func (m *CreateApplicationRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateApplicationRequest) ProtoMessage()               {}
func (*CreateApplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *CreateApplicationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateApplicationRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateApplicationRequest) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

func (m *CreateApplicationRequest) GetServiceProfileID() string {
	if m != nil {
		return m.ServiceProfileID
	}
	return ""
}

func (m *CreateApplicationRequest) GetPayloadCodec() string {
	if m != nil {
		return m.PayloadCodec
	}
	return ""
}

func (m *CreateApplicationRequest) GetPayloadEncoderScript() string {
	if m != nil {
		return m.PayloadEncoderScript
	}
	return ""
}

func (m *CreateApplicationRequest) GetPayloadDecoderScript() string {
	if m != nil {
		return m.PayloadDecoderScript
	}
	return ""
}

type CreateApplicationResponse struct {
	// ID of the application that was created.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateApplicationResponse) Reset()                    { *m = CreateApplicationResponse{} }
func (m *CreateApplicationResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateApplicationResponse) ProtoMessage()               {}
func (*CreateApplicationResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CreateApplicationResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetApplicationRequest struct {
	// Name of the application.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetApplicationRequest) Reset()                    { *m = GetApplicationRequest{} }
func (m *GetApplicationRequest) String() string            { return proto.CompactTextString(m) }
func (*GetApplicationRequest) ProtoMessage()               {}
func (*GetApplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *GetApplicationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetApplicationResponse struct {
	// ID of the application.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Name of the application.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Description of the application.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// ID of the organization to which the application belongs.
	OrganizationID int64 `protobuf:"varint,14,opt,name=organizationID" json:"organizationID,omitempty"`
	// ID of the service profile.
	ServiceProfileID string `protobuf:"bytes,15,opt,name=serviceProfileID" json:"serviceProfileID,omitempty"`
	// Payload codec.
	PayloadCodec string `protobuf:"bytes,16,opt,name=payloadCodec" json:"payloadCodec,omitempty"`
	// Payload encoder script.
	PayloadEncoderScript string `protobuf:"bytes,17,opt,name=payloadEncoderScript" json:"payloadEncoderScript,omitempty"`
	// Payload decoder script.
	PayloadDecoderScript string `protobuf:"bytes,18,opt,name=payloadDecoderScript" json:"payloadDecoderScript,omitempty"`
}

func (m *GetApplicationResponse) Reset()                    { *m = GetApplicationResponse{} }
func (m *GetApplicationResponse) String() string            { return proto.CompactTextString(m) }
func (*GetApplicationResponse) ProtoMessage()               {}
func (*GetApplicationResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetApplicationResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetApplicationResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetApplicationResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetApplicationResponse) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

func (m *GetApplicationResponse) GetServiceProfileID() string {
	if m != nil {
		return m.ServiceProfileID
	}
	return ""
}

func (m *GetApplicationResponse) GetPayloadCodec() string {
	if m != nil {
		return m.PayloadCodec
	}
	return ""
}

func (m *GetApplicationResponse) GetPayloadEncoderScript() string {
	if m != nil {
		return m.PayloadEncoderScript
	}
	return ""
}

func (m *GetApplicationResponse) GetPayloadDecoderScript() string {
	if m != nil {
		return m.PayloadDecoderScript
	}
	return ""
}

type UpdateApplicationRequest struct {
	// ID of the application to update.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Name of the application (must be unique).
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Description of the application.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// ID of the service profile.
	ServiceProfileID string `protobuf:"bytes,15,opt,name=serviceProfileID" json:"serviceProfileID,omitempty"`
	// Payload codec.
	PayloadCodec string `protobuf:"bytes,16,opt,name=payloadCodec" json:"payloadCodec,omitempty"`
	// Payload encoder script.
	PayloadEncoderScript string `protobuf:"bytes,17,opt,name=payloadEncoderScript" json:"payloadEncoderScript,omitempty"`
	// Payload decoder script.
	PayloadDecoderScript string `protobuf:"bytes,18,opt,name=payloadDecoderScript" json:"payloadDecoderScript,omitempty"`
}

func (m *UpdateApplicationRequest) Reset()                    { *m = UpdateApplicationRequest{} }
func (m *UpdateApplicationRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateApplicationRequest) ProtoMessage()               {}
func (*UpdateApplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *UpdateApplicationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateApplicationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateApplicationRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateApplicationRequest) GetServiceProfileID() string {
	if m != nil {
		return m.ServiceProfileID
	}
	return ""
}

func (m *UpdateApplicationRequest) GetPayloadCodec() string {
	if m != nil {
		return m.PayloadCodec
	}
	return ""
}

func (m *UpdateApplicationRequest) GetPayloadEncoderScript() string {
	if m != nil {
		return m.PayloadEncoderScript
	}
	return ""
}

func (m *UpdateApplicationRequest) GetPayloadDecoderScript() string {
	if m != nil {
		return m.PayloadDecoderScript
	}
	return ""
}

type UpdateApplicationResponse struct {
}

func (m *UpdateApplicationResponse) Reset()                    { *m = UpdateApplicationResponse{} }
func (m *UpdateApplicationResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateApplicationResponse) ProtoMessage()               {}
func (*UpdateApplicationResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

type DeleteApplicationRequest struct {
	// ID of the application.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteApplicationRequest) Reset()                    { *m = DeleteApplicationRequest{} }
func (m *DeleteApplicationRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteApplicationRequest) ProtoMessage()               {}
func (*DeleteApplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *DeleteApplicationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteApplicationResponse struct {
}

func (m *DeleteApplicationResponse) Reset()                    { *m = DeleteApplicationResponse{} }
func (m *DeleteApplicationResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteApplicationResponse) ProtoMessage()               {}
func (*DeleteApplicationResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

type ListApplicationRequest struct {
	// Max number of applications to return in the result-test.
	Limit int64 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	// Offset in the result-set (for pagination).
	Offset int64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	// ID of the organization to filter on.
	OrganizationID int64 `protobuf:"varint,3,opt,name=organizationID" json:"organizationID,omitempty"`
}

func (m *ListApplicationRequest) Reset()                    { *m = ListApplicationRequest{} }
func (m *ListApplicationRequest) String() string            { return proto.CompactTextString(m) }
func (*ListApplicationRequest) ProtoMessage()               {}
func (*ListApplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *ListApplicationRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListApplicationRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListApplicationRequest) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

type ApplicationListItem struct {
	// ID of the application.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Name of the application.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Description of the application.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// ID of the organization to which the application belongs.
	OrganizationID int64 `protobuf:"varint,14,opt,name=organizationID" json:"organizationID,omitempty"`
	// ID of the service profile.
	ServiceProfileID string `protobuf:"bytes,15,opt,name=serviceProfileID" json:"serviceProfileID,omitempty"`
	// Service-profile name.
	ServiceProfileName string `protobuf:"bytes,16,opt,name=serviceProfileName" json:"serviceProfileName,omitempty"`
}

func (m *ApplicationListItem) Reset()                    { *m = ApplicationListItem{} }
func (m *ApplicationListItem) String() string            { return proto.CompactTextString(m) }
func (*ApplicationListItem) ProtoMessage()               {}
func (*ApplicationListItem) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *ApplicationListItem) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ApplicationListItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationListItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ApplicationListItem) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

func (m *ApplicationListItem) GetServiceProfileID() string {
	if m != nil {
		return m.ServiceProfileID
	}
	return ""
}

func (m *ApplicationListItem) GetServiceProfileName() string {
	if m != nil {
		return m.ServiceProfileName
	}
	return ""
}

type ListApplicationResponse struct {
	// Total number of applications available within the result-set.
	TotalCount int64 `protobuf:"varint,1,opt,name=totalCount" json:"totalCount,omitempty"`
	// Applications within this result-set.
	Result []*ApplicationListItem `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *ListApplicationResponse) Reset()                    { *m = ListApplicationResponse{} }
func (m *ListApplicationResponse) String() string            { return proto.CompactTextString(m) }
func (*ListApplicationResponse) ProtoMessage()               {}
func (*ListApplicationResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *ListApplicationResponse) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListApplicationResponse) GetResult() []*ApplicationListItem {
	if m != nil {
		return m.Result
	}
	return nil
}

type EmptyResponse struct {
}

func (m *EmptyResponse) Reset()                    { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string            { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()               {}
func (*EmptyResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

type HTTPIntegrationHeader struct {
	// Key
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// Value
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *HTTPIntegrationHeader) Reset()                    { *m = HTTPIntegrationHeader{} }
func (m *HTTPIntegrationHeader) String() string            { return proto.CompactTextString(m) }
func (*HTTPIntegrationHeader) ProtoMessage()               {}
func (*HTTPIntegrationHeader) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *HTTPIntegrationHeader) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *HTTPIntegrationHeader) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type HTTPIntegration struct {
	// The id of the application.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// The headers to use when making HTTP callbacks.
	Headers []*HTTPIntegrationHeader `protobuf:"bytes,2,rep,name=headers" json:"headers,omitempty"`
	// The URL to call for uplink data.
	DataUpURL string `protobuf:"bytes,3,opt,name=dataUpURL" json:"dataUpURL,omitempty"`
	// The URL to call for join notifications.
	JoinNotificationURL string `protobuf:"bytes,4,opt,name=joinNotificationURL" json:"joinNotificationURL,omitempty"`
	// The URL to call for ACK notifications (for confirmed downlink data).
	AckNotificationURL string `protobuf:"bytes,5,opt,name=ackNotificationURL" json:"ackNotificationURL,omitempty"`
	// The URL to call for error notifications.
	ErrorNotificationURL string `protobuf:"bytes,6,opt,name=errorNotificationURL" json:"errorNotificationURL,omitempty"`
}

func (m *HTTPIntegration) Reset()                    { *m = HTTPIntegration{} }
func (m *HTTPIntegration) String() string            { return proto.CompactTextString(m) }
func (*HTTPIntegration) ProtoMessage()               {}
func (*HTTPIntegration) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *HTTPIntegration) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *HTTPIntegration) GetHeaders() []*HTTPIntegrationHeader {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HTTPIntegration) GetDataUpURL() string {
	if m != nil {
		return m.DataUpURL
	}
	return ""
}

func (m *HTTPIntegration) GetJoinNotificationURL() string {
	if m != nil {
		return m.JoinNotificationURL
	}
	return ""
}

func (m *HTTPIntegration) GetAckNotificationURL() string {
	if m != nil {
		return m.AckNotificationURL
	}
	return ""
}

func (m *HTTPIntegration) GetErrorNotificationURL() string {
	if m != nil {
		return m.ErrorNotificationURL
	}
	return ""
}

type GetHTTPIntegrationRequest struct {
	// The id of the application.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetHTTPIntegrationRequest) Reset()                    { *m = GetHTTPIntegrationRequest{} }
func (m *GetHTTPIntegrationRequest) String() string            { return proto.CompactTextString(m) }
func (*GetHTTPIntegrationRequest) ProtoMessage()               {}
func (*GetHTTPIntegrationRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *GetHTTPIntegrationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteIntegrationRequest struct {
	// The id of the application.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteIntegrationRequest) Reset()                    { *m = DeleteIntegrationRequest{} }
func (m *DeleteIntegrationRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteIntegrationRequest) ProtoMessage()               {}
func (*DeleteIntegrationRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *DeleteIntegrationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ListIntegrationRequest struct {
	// The id of the application.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ListIntegrationRequest) Reset()                    { *m = ListIntegrationRequest{} }
func (m *ListIntegrationRequest) String() string            { return proto.CompactTextString(m) }
func (*ListIntegrationRequest) ProtoMessage()               {}
func (*ListIntegrationRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *ListIntegrationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ListIntegrationResponse struct {
	// The integration kinds associated with the application.
	Kinds []IntegrationKind `protobuf:"varint,1,rep,packed,name=kinds,enum=api.IntegrationKind" json:"kinds,omitempty"`
}

func (m *ListIntegrationResponse) Reset()                    { *m = ListIntegrationResponse{} }
func (m *ListIntegrationResponse) String() string            { return proto.CompactTextString(m) }
func (*ListIntegrationResponse) ProtoMessage()               {}
func (*ListIntegrationResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *ListIntegrationResponse) GetKinds() []IntegrationKind {
	if m != nil {
		return m.Kinds
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateApplicationRequest)(nil), "api.CreateApplicationRequest")
	proto.RegisterType((*CreateApplicationResponse)(nil), "api.CreateApplicationResponse")
	proto.RegisterType((*GetApplicationRequest)(nil), "api.GetApplicationRequest")
	proto.RegisterType((*GetApplicationResponse)(nil), "api.GetApplicationResponse")
	proto.RegisterType((*UpdateApplicationRequest)(nil), "api.UpdateApplicationRequest")
	proto.RegisterType((*UpdateApplicationResponse)(nil), "api.UpdateApplicationResponse")
	proto.RegisterType((*DeleteApplicationRequest)(nil), "api.DeleteApplicationRequest")
	proto.RegisterType((*DeleteApplicationResponse)(nil), "api.DeleteApplicationResponse")
	proto.RegisterType((*ListApplicationRequest)(nil), "api.ListApplicationRequest")
	proto.RegisterType((*ApplicationListItem)(nil), "api.ApplicationListItem")
	proto.RegisterType((*ListApplicationResponse)(nil), "api.ListApplicationResponse")
	proto.RegisterType((*EmptyResponse)(nil), "api.EmptyResponse")
	proto.RegisterType((*HTTPIntegrationHeader)(nil), "api.HTTPIntegrationHeader")
	proto.RegisterType((*HTTPIntegration)(nil), "api.HTTPIntegration")
	proto.RegisterType((*GetHTTPIntegrationRequest)(nil), "api.GetHTTPIntegrationRequest")
	proto.RegisterType((*DeleteIntegrationRequest)(nil), "api.DeleteIntegrationRequest")
	proto.RegisterType((*ListIntegrationRequest)(nil), "api.ListIntegrationRequest")
	proto.RegisterType((*ListIntegrationResponse)(nil), "api.ListIntegrationResponse")
	proto.RegisterEnum("api.IntegrationKind", IntegrationKind_name, IntegrationKind_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Application service

type ApplicationClient interface {
	// Create creates the given application.
	Create(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error)
	// Get returns the requested application.
	Get(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*GetApplicationResponse, error)
	// Update updates the given application.
	Update(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*UpdateApplicationResponse, error)
	// Delete deletes the given application.
	Delete(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*DeleteApplicationResponse, error)
	// List lists the available applications.
	List(ctx context.Context, in *ListApplicationRequest, opts ...grpc.CallOption) (*ListApplicationResponse, error)
	// CreateHTTPIntegration creates an HTTP application-integration.
	CreateHTTPIntegration(ctx context.Context, in *HTTPIntegration, opts ...grpc.CallOption) (*EmptyResponse, error)
	// GetHTTPIntegration returns the HTTP application-itegration.
	GetHTTPIntegration(ctx context.Context, in *GetHTTPIntegrationRequest, opts ...grpc.CallOption) (*HTTPIntegration, error)
	// UpdateHTTPIntegration updates the HTTP application-integration.
	UpdateHTTPIntegration(ctx context.Context, in *HTTPIntegration, opts ...grpc.CallOption) (*EmptyResponse, error)
	// DeleteIntegration deletes the application-integration of the given type.
	DeleteHTTPIntegration(ctx context.Context, in *DeleteIntegrationRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// ListIntegrations lists all configured integrations.
	ListIntegrations(ctx context.Context, in *ListIntegrationRequest, opts ...grpc.CallOption) (*ListIntegrationResponse, error)
}

type applicationClient struct {
	cc *grpc.ClientConn
}

func NewApplicationClient(cc *grpc.ClientConn) ApplicationClient {
	return &applicationClient{cc}
}

func (c *applicationClient) Create(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error) {
	out := new(CreateApplicationResponse)
	err := grpc.Invoke(ctx, "/api.Application/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) Get(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*GetApplicationResponse, error) {
	out := new(GetApplicationResponse)
	err := grpc.Invoke(ctx, "/api.Application/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) Update(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*UpdateApplicationResponse, error) {
	out := new(UpdateApplicationResponse)
	err := grpc.Invoke(ctx, "/api.Application/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) Delete(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*DeleteApplicationResponse, error) {
	out := new(DeleteApplicationResponse)
	err := grpc.Invoke(ctx, "/api.Application/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) List(ctx context.Context, in *ListApplicationRequest, opts ...grpc.CallOption) (*ListApplicationResponse, error) {
	out := new(ListApplicationResponse)
	err := grpc.Invoke(ctx, "/api.Application/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) CreateHTTPIntegration(ctx context.Context, in *HTTPIntegration, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/api.Application/CreateHTTPIntegration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) GetHTTPIntegration(ctx context.Context, in *GetHTTPIntegrationRequest, opts ...grpc.CallOption) (*HTTPIntegration, error) {
	out := new(HTTPIntegration)
	err := grpc.Invoke(ctx, "/api.Application/GetHTTPIntegration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) UpdateHTTPIntegration(ctx context.Context, in *HTTPIntegration, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/api.Application/UpdateHTTPIntegration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) DeleteHTTPIntegration(ctx context.Context, in *DeleteIntegrationRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/api.Application/DeleteHTTPIntegration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) ListIntegrations(ctx context.Context, in *ListIntegrationRequest, opts ...grpc.CallOption) (*ListIntegrationResponse, error) {
	out := new(ListIntegrationResponse)
	err := grpc.Invoke(ctx, "/api.Application/ListIntegrations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Application service

type ApplicationServer interface {
	// Create creates the given application.
	Create(context.Context, *CreateApplicationRequest) (*CreateApplicationResponse, error)
	// Get returns the requested application.
	Get(context.Context, *GetApplicationRequest) (*GetApplicationResponse, error)
	// Update updates the given application.
	Update(context.Context, *UpdateApplicationRequest) (*UpdateApplicationResponse, error)
	// Delete deletes the given application.
	Delete(context.Context, *DeleteApplicationRequest) (*DeleteApplicationResponse, error)
	// List lists the available applications.
	List(context.Context, *ListApplicationRequest) (*ListApplicationResponse, error)
	// CreateHTTPIntegration creates an HTTP application-integration.
	CreateHTTPIntegration(context.Context, *HTTPIntegration) (*EmptyResponse, error)
	// GetHTTPIntegration returns the HTTP application-itegration.
	GetHTTPIntegration(context.Context, *GetHTTPIntegrationRequest) (*HTTPIntegration, error)
	// UpdateHTTPIntegration updates the HTTP application-integration.
	UpdateHTTPIntegration(context.Context, *HTTPIntegration) (*EmptyResponse, error)
	// DeleteIntegration deletes the application-integration of the given type.
	DeleteHTTPIntegration(context.Context, *DeleteIntegrationRequest) (*EmptyResponse, error)
	// ListIntegrations lists all configured integrations.
	ListIntegrations(context.Context, *ListIntegrationRequest) (*ListIntegrationResponse, error)
}

func RegisterApplicationServer(s *grpc.Server, srv ApplicationServer) {
	s.RegisterService(&_Application_serviceDesc, srv)
}

func _Application_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Application/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).Create(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Application/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).Get(ctx, req.(*GetApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Application/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).Update(ctx, req.(*UpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Application/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).Delete(ctx, req.(*DeleteApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Application/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).List(ctx, req.(*ListApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_CreateHTTPIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPIntegration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).CreateHTTPIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Application/CreateHTTPIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).CreateHTTPIntegration(ctx, req.(*HTTPIntegration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_GetHTTPIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHTTPIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).GetHTTPIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Application/GetHTTPIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).GetHTTPIntegration(ctx, req.(*GetHTTPIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_UpdateHTTPIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPIntegration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).UpdateHTTPIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Application/UpdateHTTPIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).UpdateHTTPIntegration(ctx, req.(*HTTPIntegration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_DeleteHTTPIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).DeleteHTTPIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Application/DeleteHTTPIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).DeleteHTTPIntegration(ctx, req.(*DeleteIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_ListIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).ListIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Application/ListIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).ListIntegrations(ctx, req.(*ListIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Application_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Application",
	HandlerType: (*ApplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Application_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Application_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Application_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Application_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Application_List_Handler,
		},
		{
			MethodName: "CreateHTTPIntegration",
			Handler:    _Application_CreateHTTPIntegration_Handler,
		},
		{
			MethodName: "GetHTTPIntegration",
			Handler:    _Application_GetHTTPIntegration_Handler,
		},
		{
			MethodName: "UpdateHTTPIntegration",
			Handler:    _Application_UpdateHTTPIntegration_Handler,
		},
		{
			MethodName: "DeleteHTTPIntegration",
			Handler:    _Application_DeleteHTTPIntegration_Handler,
		},
		{
			MethodName: "ListIntegrations",
			Handler:    _Application_ListIntegrations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "application.proto",
}

func init() { proto.RegisterFile("application.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 884 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x57, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0x27, 0x76, 0x1b, 0x76, 0x5f, 0xa1, 0x49, 0xa7, 0x49, 0x70, 0x9d, 0x10, 0x05, 0x23, 0x20,
	0xf2, 0x8a, 0xa4, 0xca, 0x72, 0xe2, 0x82, 0x50, 0x53, 0x75, 0x23, 0x56, 0xab, 0x95, 0xd9, 0xde,
	0x10, 0xd2, 0x10, 0x4f, 0xb2, 0xb3, 0x71, 0x3c, 0xc6, 0x9e, 0x54, 0x6a, 0x81, 0x0b, 0x57, 0x8e,
	0x5c, 0xf8, 0x18, 0x7c, 0x02, 0xbe, 0x04, 0x1f, 0x80, 0x0b, 0x77, 0xbe, 0x02, 0x9a, 0x3f, 0x69,
	0x1c, 0x67, 0x2c, 0x05, 0xc1, 0x01, 0xc4, 0x2d, 0x33, 0xef, 0xf7, 0xfe, 0xfe, 0xde, 0x7b, 0xe3,
	0xc0, 0x09, 0x4e, 0x92, 0x88, 0x4e, 0x31, 0xa7, 0x2c, 0x1e, 0x24, 0x29, 0xe3, 0x0c, 0xd9, 0x38,
	0xa1, 0x6e, 0x67, 0xce, 0xd8, 0x3c, 0x22, 0x43, 0x9c, 0xd0, 0x21, 0x8e, 0x63, 0xc6, 0x25, 0x22,
	0x53, 0x10, 0xef, 0x67, 0x0b, 0x9c, 0x8b, 0x94, 0x60, 0x4e, 0x3e, 0xdd, 0xa8, 0x07, 0xe4, 0xeb,
	0x15, 0xc9, 0x38, 0x42, 0x70, 0x10, 0xe3, 0x25, 0x71, 0x2a, 0xbd, 0x4a, 0xff, 0x61, 0x20, 0x7f,
	0xa3, 0x1e, 0x1c, 0x85, 0x24, 0x9b, 0xa6, 0x34, 0x11, 0x48, 0xc7, 0x92, 0xa2, 0xfc, 0x15, 0x7a,
	0x1f, 0x8e, 0x59, 0x3a, 0xc7, 0x31, 0xbd, 0x93, 0xc6, 0x26, 0x63, 0xe7, 0xb8, 0x57, 0xe9, 0xdb,
	0x41, 0xe1, 0x16, 0xf9, 0x50, 0xcf, 0x48, 0x7a, 0x43, 0xa7, 0xe4, 0x79, 0xca, 0x66, 0x34, 0x22,
	0x93, 0xb1, 0x53, 0x93, 0xe6, 0x76, 0xee, 0x91, 0x07, 0x6f, 0x24, 0xf8, 0x36, 0x62, 0x38, 0xbc,
	0x60, 0x21, 0x99, 0x3a, 0x75, 0x89, 0xdb, 0xba, 0x43, 0x23, 0x68, 0xe8, 0xf3, 0x65, 0x3c, 0x65,
	0x21, 0x49, 0x3f, 0x97, 0x21, 0x39, 0x27, 0x12, 0x6b, 0x94, 0xe5, 0x74, 0xc6, 0x24, 0xaf, 0x83,
	0xb6, 0x74, 0xb6, 0x64, 0xde, 0x23, 0x38, 0x33, 0x54, 0x2c, 0x4b, 0x58, 0x9c, 0x11, 0x74, 0x0c,
	0x16, 0x0d, 0x65, 0xc1, 0xec, 0xc0, 0xa2, 0xa1, 0xf7, 0x01, 0x34, 0xaf, 0x08, 0x37, 0xd4, 0xb6,
	0x08, 0xfc, 0xc5, 0x82, 0x56, 0x11, 0x69, 0xb6, 0x79, 0x4f, 0x8b, 0x55, 0x4e, 0x8b, 0xfd, 0xff,
	0xa3, 0xe5, 0x27, 0x0b, 0x9c, 0xeb, 0x24, 0x34, 0x77, 0xf2, 0x3f, 0x53, 0xc2, 0xff, 0x6a, 0x69,
	0xda, 0x70, 0x66, 0xa8, 0x8c, 0xea, 0x2e, 0xcf, 0x07, 0x67, 0x4c, 0x22, 0xb2, 0x4f, 0xd9, 0x84,
	0x21, 0x03, 0x56, 0x1b, 0x8a, 0xa1, 0xf5, 0x94, 0x66, 0xa6, 0x5e, 0x6f, 0xc0, 0x61, 0x44, 0x97,
	0x94, 0x6b, 0x4b, 0xea, 0x80, 0x5a, 0x50, 0x65, 0xb3, 0x59, 0x46, 0xb8, 0x64, 0xc1, 0x0e, 0xf4,
	0xc9, 0xd0, 0xa8, 0xb6, 0xa9, 0x51, 0xbd, 0xdf, 0x2a, 0x70, 0x9a, 0x73, 0x26, 0x7c, 0x4f, 0x38,
	0x59, 0xfe, 0x8b, 0xc7, 0x65, 0x00, 0x68, 0xfb, 0xee, 0x99, 0x88, 0x4b, 0x75, 0x86, 0x41, 0xe2,
	0x2d, 0xe0, 0xad, 0x9d, 0x8a, 0xea, 0x9d, 0xd0, 0x05, 0xe0, 0x8c, 0xe3, 0xe8, 0x82, 0xad, 0xe2,
	0x75, 0x5d, 0x73, 0x37, 0xe8, 0x1c, 0xaa, 0x29, 0xc9, 0x56, 0x91, 0x28, 0xae, 0xdd, 0x3f, 0x1a,
	0x39, 0x03, 0x9c, 0xd0, 0x81, 0xa1, 0x5c, 0x81, 0xc6, 0x79, 0x35, 0x78, 0xf3, 0x72, 0x99, 0xf0,
	0xdb, 0x7b, 0x3e, 0x3f, 0x81, 0xe6, 0x93, 0x17, 0x2f, 0x9e, 0x4f, 0x62, 0x4e, 0xe6, 0xa9, 0xd4,
	0x79, 0x42, 0x70, 0x48, 0x52, 0x54, 0x07, 0x7b, 0x41, 0x6e, 0xf5, 0xab, 0x20, 0x7e, 0x0a, 0x82,
	0x6f, 0x70, 0xb4, 0x5a, 0xd7, 0x58, 0x1d, 0xbc, 0x1f, 0x2c, 0xa8, 0x15, 0x2c, 0xec, 0x90, 0xf3,
	0x11, 0xbc, 0xfe, 0x52, 0x5a, 0xcd, 0x74, 0xa0, 0xae, 0x0c, 0xd4, 0xe8, 0x38, 0x58, 0x43, 0x51,
	0x07, 0x1e, 0x86, 0x98, 0xe3, 0xeb, 0xe4, 0x3a, 0x78, 0xaa, 0xc9, 0xdb, 0x5c, 0xa0, 0x73, 0x38,
	0x7d, 0xc5, 0x68, 0xfc, 0x8c, 0x71, 0x3a, 0xd3, 0xd9, 0x0a, 0xdc, 0x81, 0xc4, 0x99, 0x44, 0x82,
	0x18, 0x3c, 0x5d, 0x14, 0x15, 0x0e, 0x15, 0x31, 0xbb, 0x12, 0x31, 0x84, 0x24, 0x4d, 0x59, 0x5a,
	0xd4, 0xa8, 0xaa, 0x21, 0x34, 0xc9, 0xc4, 0xb3, 0x71, 0x45, 0x78, 0x21, 0xb1, 0xb2, 0x41, 0xbb,
	0x1f, 0xca, 0x3d, 0xb0, 0x7d, 0x35, 0x77, 0x7b, 0x20, 0x2f, 0x55, 0x3f, 0x6d, 0x21, 0x75, 0x3f,
	0xf9, 0x70, 0xb8, 0xa0, 0x71, 0x98, 0x39, 0x95, 0x9e, 0xdd, 0x3f, 0x1e, 0x35, 0x24, 0x0b, 0x39,
	0xe0, 0x67, 0x34, 0x0e, 0x03, 0x05, 0xf1, 0xdb, 0x50, 0x2b, 0x48, 0xd0, 0x03, 0x38, 0x10, 0x99,
	0xd5, 0x5f, 0x1b, 0xfd, 0xf1, 0x00, 0x8e, 0x72, 0x6d, 0x86, 0x08, 0x54, 0xd5, 0x6b, 0x89, 0xde,
	0x96, 0x36, 0xcb, 0x3e, 0x36, 0xdc, 0x6e, 0x99, 0x58, 0xb7, 0x63, 0xe7, 0xfb, 0x5f, 0x7f, 0xff,
	0xd1, 0x6a, 0x79, 0x27, 0xea, 0x4b, 0x66, 0x83, 0xc8, 0x3e, 0xae, 0xf8, 0xe8, 0x4b, 0xb0, 0xaf,
	0x08, 0x47, 0xaa, 0x7b, 0x8c, 0x2f, 0xae, 0xdb, 0x36, 0xca, 0xb4, 0xf5, 0xae, 0xb4, 0xee, 0xa0,
	0xd6, 0x8e, 0xf5, 0xe1, 0x37, 0x34, 0xfc, 0x0e, 0xbd, 0x82, 0xaa, 0x5a, 0xa1, 0x3a, 0x8d, 0xb2,
	0x97, 0x46, 0xa7, 0x51, 0xbe, 0x6e, 0xdf, 0x91, 0x8e, 0xda, 0x6e, 0x89, 0x23, 0x91, 0xcb, 0x1c,
	0xaa, 0x8a, 0x7c, 0xed, 0xab, 0x6c, 0x3d, 0x6b, 0x5f, 0xe5, 0x1b, 0x59, 0x27, 0xe5, 0x97, 0x25,
	0xf5, 0x05, 0x1c, 0x88, 0x7e, 0x40, 0xaa, 0x32, 0xe6, 0xe5, 0xed, 0x76, 0xcc, 0x42, 0xed, 0xe2,
	0x4c, 0xba, 0x38, 0x45, 0xbb, 0xac, 0xa0, 0x1b, 0x68, 0x2a, 0x36, 0x8b, 0x3b, 0xa0, 0x61, 0x1a,
	0x71, 0x17, 0xc9, 0xdb, 0xed, 0x15, 0xf4, 0x58, 0x5a, 0xff, 0xd0, 0xeb, 0x9b, 0x13, 0x18, 0xd2,
	0x8d, 0x7e, 0x36, 0x7c, 0xc9, 0x79, 0x22, 0xca, 0xf7, 0x2d, 0xa0, 0xdd, 0x41, 0x43, 0xdd, 0x35,
	0xfb, 0xe6, 0x09, 0x74, 0x8d, 0x41, 0x79, 0xe7, 0x32, 0x00, 0x1f, 0xed, 0x1d, 0x80, 0xc8, 0x5a,
	0x91, 0xff, 0xb7, 0xb3, 0x76, 0xff, 0x62, 0xd6, 0x4d, 0xd5, 0x08, 0x45, 0xbf, 0xf9, 0x1e, 0x32,
	0xe4, 0x6d, 0x0a, 0x40, 0x67, 0xed, 0xef, 0x9f, 0xf5, 0x1d, 0xd4, 0x0b, 0x9b, 0x25, 0xcb, 0x75,
	0x95, 0xc1, 0x6d, 0xc7, 0x2c, 0xd4, 0x01, 0x3c, 0x92, 0x01, 0xbc, 0x87, 0xde, 0xdd, 0x23, 0x80,
	0xaf, 0xaa, 0xf2, 0x9f, 0xcc, 0xe3, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x18, 0x63, 0xc2,
	0x01, 0x0d, 0x00, 0x00,
}
