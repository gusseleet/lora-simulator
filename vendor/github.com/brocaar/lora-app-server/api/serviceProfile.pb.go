// Code generated by protoc-gen-go. DO NOT EDIT.
// source: serviceProfile.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateServiceProfileRequest struct {
	ServiceProfile *ServiceProfile `protobuf:"bytes,1,opt,name=serviceProfile" json:"serviceProfile,omitempty"`
	// Name of the service-profile.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Organization id of the service-profile.
	OrganizationID int64 `protobuf:"varint,3,opt,name=organizationID" json:"organizationID,omitempty"`
	// Network-server id of the service-profile.
	NetworkServerID int64 `protobuf:"varint,4,opt,name=networkServerID" json:"networkServerID,omitempty"`
}

func (m *CreateServiceProfileRequest) Reset()                    { *m = CreateServiceProfileRequest{} }
func (m *CreateServiceProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateServiceProfileRequest) ProtoMessage()               {}
func (*CreateServiceProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *CreateServiceProfileRequest) GetServiceProfile() *ServiceProfile {
	if m != nil {
		return m.ServiceProfile
	}
	return nil
}

func (m *CreateServiceProfileRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateServiceProfileRequest) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

func (m *CreateServiceProfileRequest) GetNetworkServerID() int64 {
	if m != nil {
		return m.NetworkServerID
	}
	return 0
}

type CreateServiceProfileResponse struct {
	// ID of the service-profile.
	ServiceProfileID string `protobuf:"bytes,1,opt,name=serviceProfileID" json:"serviceProfileID,omitempty"`
}

func (m *CreateServiceProfileResponse) Reset()                    { *m = CreateServiceProfileResponse{} }
func (m *CreateServiceProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateServiceProfileResponse) ProtoMessage()               {}
func (*CreateServiceProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *CreateServiceProfileResponse) GetServiceProfileID() string {
	if m != nil {
		return m.ServiceProfileID
	}
	return ""
}

type GetServiceProfileRequest struct {
	// ID of the service-profile.
	ServiceProfileID string `protobuf:"bytes,1,opt,name=serviceProfileID" json:"serviceProfileID,omitempty"`
}

func (m *GetServiceProfileRequest) Reset()                    { *m = GetServiceProfileRequest{} }
func (m *GetServiceProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetServiceProfileRequest) ProtoMessage()               {}
func (*GetServiceProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

func (m *GetServiceProfileRequest) GetServiceProfileID() string {
	if m != nil {
		return m.ServiceProfileID
	}
	return ""
}

type GetServiceProfileResponse struct {
	ServiceProfile *ServiceProfile `protobuf:"bytes,1,opt,name=serviceProfile" json:"serviceProfile,omitempty"`
	// Name of the service-profile.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Organization id of the service-profile.
	OrganizationID int64 `protobuf:"varint,3,opt,name=organizationID" json:"organizationID,omitempty"`
	// Network-server id of the service-profile.
	NetworkServerID int64 `protobuf:"varint,4,opt,name=networkServerID" json:"networkServerID,omitempty"`
	// Timestamp when the record was created.
	CreatedAt string `protobuf:"bytes,5,opt,name=createdAt" json:"createdAt,omitempty"`
	// Timestamp when the record was last updated.
	UpdatedAt string `protobuf:"bytes,6,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *GetServiceProfileResponse) Reset()                    { *m = GetServiceProfileResponse{} }
func (m *GetServiceProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*GetServiceProfileResponse) ProtoMessage()               {}
func (*GetServiceProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{3} }

func (m *GetServiceProfileResponse) GetServiceProfile() *ServiceProfile {
	if m != nil {
		return m.ServiceProfile
	}
	return nil
}

func (m *GetServiceProfileResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetServiceProfileResponse) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

func (m *GetServiceProfileResponse) GetNetworkServerID() int64 {
	if m != nil {
		return m.NetworkServerID
	}
	return 0
}

func (m *GetServiceProfileResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *GetServiceProfileResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type UpdateServiceProfileRequest struct {
	ServiceProfile *ServiceProfile `protobuf:"bytes,1,opt,name=serviceProfile" json:"serviceProfile,omitempty"`
	// Name of the service-profile.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *UpdateServiceProfileRequest) Reset()                    { *m = UpdateServiceProfileRequest{} }
func (m *UpdateServiceProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateServiceProfileRequest) ProtoMessage()               {}
func (*UpdateServiceProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{4} }

func (m *UpdateServiceProfileRequest) GetServiceProfile() *ServiceProfile {
	if m != nil {
		return m.ServiceProfile
	}
	return nil
}

func (m *UpdateServiceProfileRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UpdateServiceProfileResponse struct {
}

func (m *UpdateServiceProfileResponse) Reset()                    { *m = UpdateServiceProfileResponse{} }
func (m *UpdateServiceProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateServiceProfileResponse) ProtoMessage()               {}
func (*UpdateServiceProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{5} }

type DeleteServiceProfileRequest struct {
	// ID of the service-profile.
	ServiceProfileID string `protobuf:"bytes,1,opt,name=serviceProfileID" json:"serviceProfileID,omitempty"`
}

func (m *DeleteServiceProfileRequest) Reset()                    { *m = DeleteServiceProfileRequest{} }
func (m *DeleteServiceProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteServiceProfileRequest) ProtoMessage()               {}
func (*DeleteServiceProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{6} }

func (m *DeleteServiceProfileRequest) GetServiceProfileID() string {
	if m != nil {
		return m.ServiceProfileID
	}
	return ""
}

type DeleteServiceProfileResponse struct {
}

func (m *DeleteServiceProfileResponse) Reset()                    { *m = DeleteServiceProfileResponse{} }
func (m *DeleteServiceProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteServiceProfileResponse) ProtoMessage()               {}
func (*DeleteServiceProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{7} }

type ListServiceProfileRequest struct {
	// Max number of items to return.
	Limit int64 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	// Offset in the result-set (for pagination).
	Offset int64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	// Organization id to filter on.
	OrganizationID int64 `protobuf:"varint,3,opt,name=organizationID" json:"organizationID,omitempty"`
}

func (m *ListServiceProfileRequest) Reset()                    { *m = ListServiceProfileRequest{} }
func (m *ListServiceProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*ListServiceProfileRequest) ProtoMessage()               {}
func (*ListServiceProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{8} }

func (m *ListServiceProfileRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListServiceProfileRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListServiceProfileRequest) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

type ServiceProfileMeta struct {
	// ID of the service-profile.
	ServiceProfileID string `protobuf:"bytes,1,opt,name=serviceProfileID" json:"serviceProfileID,omitempty"`
	// Name of the service-profile.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Organization id of the service-profile.
	OrganizationID int64 `protobuf:"varint,3,opt,name=organizationID" json:"organizationID,omitempty"`
	// Network-server id of the service-profile.
	NetworkServerID int64 `protobuf:"varint,4,opt,name=networkServerID" json:"networkServerID,omitempty"`
	// Timestamp when the record was created.
	CreatedAt string `protobuf:"bytes,5,opt,name=createdAt" json:"createdAt,omitempty"`
	// Timestamp when the record was last updated.
	UpdatedAt string `protobuf:"bytes,6,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *ServiceProfileMeta) Reset()                    { *m = ServiceProfileMeta{} }
func (m *ServiceProfileMeta) String() string            { return proto.CompactTextString(m) }
func (*ServiceProfileMeta) ProtoMessage()               {}
func (*ServiceProfileMeta) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{9} }

func (m *ServiceProfileMeta) GetServiceProfileID() string {
	if m != nil {
		return m.ServiceProfileID
	}
	return ""
}

func (m *ServiceProfileMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceProfileMeta) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

func (m *ServiceProfileMeta) GetNetworkServerID() int64 {
	if m != nil {
		return m.NetworkServerID
	}
	return 0
}

func (m *ServiceProfileMeta) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *ServiceProfileMeta) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type ListServiceProfileResponse struct {
	// Total number of service-profiles.
	TotalCount int64                 `protobuf:"varint,1,opt,name=totalCount" json:"totalCount,omitempty"`
	Result     []*ServiceProfileMeta `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *ListServiceProfileResponse) Reset()                    { *m = ListServiceProfileResponse{} }
func (m *ListServiceProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*ListServiceProfileResponse) ProtoMessage()               {}
func (*ListServiceProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{10} }

func (m *ListServiceProfileResponse) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListServiceProfileResponse) GetResult() []*ServiceProfileMeta {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateServiceProfileRequest)(nil), "api.CreateServiceProfileRequest")
	proto.RegisterType((*CreateServiceProfileResponse)(nil), "api.CreateServiceProfileResponse")
	proto.RegisterType((*GetServiceProfileRequest)(nil), "api.GetServiceProfileRequest")
	proto.RegisterType((*GetServiceProfileResponse)(nil), "api.GetServiceProfileResponse")
	proto.RegisterType((*UpdateServiceProfileRequest)(nil), "api.UpdateServiceProfileRequest")
	proto.RegisterType((*UpdateServiceProfileResponse)(nil), "api.UpdateServiceProfileResponse")
	proto.RegisterType((*DeleteServiceProfileRequest)(nil), "api.DeleteServiceProfileRequest")
	proto.RegisterType((*DeleteServiceProfileResponse)(nil), "api.DeleteServiceProfileResponse")
	proto.RegisterType((*ListServiceProfileRequest)(nil), "api.ListServiceProfileRequest")
	proto.RegisterType((*ServiceProfileMeta)(nil), "api.ServiceProfileMeta")
	proto.RegisterType((*ListServiceProfileResponse)(nil), "api.ListServiceProfileResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServiceProfileService service

type ServiceProfileServiceClient interface {
	// Create creates the given service-profile.
	Create(ctx context.Context, in *CreateServiceProfileRequest, opts ...grpc.CallOption) (*CreateServiceProfileResponse, error)
	// Get returns the service-profile matching the given id.
	Get(ctx context.Context, in *GetServiceProfileRequest, opts ...grpc.CallOption) (*GetServiceProfileResponse, error)
	// Update updates the given serviceprofile.
	Update(ctx context.Context, in *UpdateServiceProfileRequest, opts ...grpc.CallOption) (*UpdateServiceProfileResponse, error)
	// Delete deletes the service-profile matching the given id.
	Delete(ctx context.Context, in *DeleteServiceProfileRequest, opts ...grpc.CallOption) (*DeleteServiceProfileResponse, error)
	// List lists the available service-profiles.
	List(ctx context.Context, in *ListServiceProfileRequest, opts ...grpc.CallOption) (*ListServiceProfileResponse, error)
}

type serviceProfileServiceClient struct {
	cc *grpc.ClientConn
}

func NewServiceProfileServiceClient(cc *grpc.ClientConn) ServiceProfileServiceClient {
	return &serviceProfileServiceClient{cc}
}

func (c *serviceProfileServiceClient) Create(ctx context.Context, in *CreateServiceProfileRequest, opts ...grpc.CallOption) (*CreateServiceProfileResponse, error) {
	out := new(CreateServiceProfileResponse)
	err := grpc.Invoke(ctx, "/api.ServiceProfileService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProfileServiceClient) Get(ctx context.Context, in *GetServiceProfileRequest, opts ...grpc.CallOption) (*GetServiceProfileResponse, error) {
	out := new(GetServiceProfileResponse)
	err := grpc.Invoke(ctx, "/api.ServiceProfileService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProfileServiceClient) Update(ctx context.Context, in *UpdateServiceProfileRequest, opts ...grpc.CallOption) (*UpdateServiceProfileResponse, error) {
	out := new(UpdateServiceProfileResponse)
	err := grpc.Invoke(ctx, "/api.ServiceProfileService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProfileServiceClient) Delete(ctx context.Context, in *DeleteServiceProfileRequest, opts ...grpc.CallOption) (*DeleteServiceProfileResponse, error) {
	out := new(DeleteServiceProfileResponse)
	err := grpc.Invoke(ctx, "/api.ServiceProfileService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProfileServiceClient) List(ctx context.Context, in *ListServiceProfileRequest, opts ...grpc.CallOption) (*ListServiceProfileResponse, error) {
	out := new(ListServiceProfileResponse)
	err := grpc.Invoke(ctx, "/api.ServiceProfileService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServiceProfileService service

type ServiceProfileServiceServer interface {
	// Create creates the given service-profile.
	Create(context.Context, *CreateServiceProfileRequest) (*CreateServiceProfileResponse, error)
	// Get returns the service-profile matching the given id.
	Get(context.Context, *GetServiceProfileRequest) (*GetServiceProfileResponse, error)
	// Update updates the given serviceprofile.
	Update(context.Context, *UpdateServiceProfileRequest) (*UpdateServiceProfileResponse, error)
	// Delete deletes the service-profile matching the given id.
	Delete(context.Context, *DeleteServiceProfileRequest) (*DeleteServiceProfileResponse, error)
	// List lists the available service-profiles.
	List(context.Context, *ListServiceProfileRequest) (*ListServiceProfileResponse, error)
}

func RegisterServiceProfileServiceServer(s *grpc.Server, srv ServiceProfileServiceServer) {
	s.RegisterService(&_ServiceProfileService_serviceDesc, srv)
}

func _ServiceProfileService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProfileServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceProfileService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProfileServiceServer).Create(ctx, req.(*CreateServiceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProfileService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProfileServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceProfileService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProfileServiceServer).Get(ctx, req.(*GetServiceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProfileService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProfileServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceProfileService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProfileServiceServer).Update(ctx, req.(*UpdateServiceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProfileService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProfileServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceProfileService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProfileServiceServer).Delete(ctx, req.(*DeleteServiceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProfileService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProfileServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceProfileService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProfileServiceServer).List(ctx, req.(*ListServiceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceProfileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ServiceProfileService",
	HandlerType: (*ServiceProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ServiceProfileService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ServiceProfileService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ServiceProfileService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ServiceProfileService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ServiceProfileService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serviceProfile.proto",
}

func init() { proto.RegisterFile("serviceProfile.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 560 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0xdd, 0x8a, 0xd3, 0x50,
	0x10, 0x26, 0x9b, 0x6e, 0x60, 0x67, 0xa1, 0xca, 0xb8, 0xeb, 0x66, 0xd3, 0x6c, 0x8d, 0xb9, 0x90,
	0x50, 0xb0, 0x95, 0x7a, 0x21, 0xa8, 0x37, 0xba, 0xc5, 0xa5, 0xa2, 0x20, 0x11, 0x1f, 0xe0, 0xb8,
	0x3b, 0x2d, 0x07, 0xd3, 0x9c, 0x6c, 0x72, 0xba, 0x82, 0x22, 0x82, 0x6f, 0x20, 0xbe, 0x90, 0xef,
	0xe0, 0x1b, 0x88, 0x4f, 0x21, 0x08, 0x92, 0x93, 0xb3, 0x6a, 0xb2, 0x49, 0x68, 0x6f, 0x44, 0xef,
	0x3a, 0x3f, 0x99, 0xef, 0x9b, 0xef, 0xcc, 0x4c, 0x61, 0x27, 0xa3, 0xf4, 0x8c, 0x1f, 0xd3, 0xb3,
	0x54, 0xcc, 0x78, 0x44, 0xc3, 0x24, 0x15, 0x52, 0xa0, 0xc9, 0x12, 0xee, 0xb8, 0x73, 0x21, 0xe6,
	0x11, 0x8d, 0x58, 0xc2, 0x47, 0x2c, 0x8e, 0x85, 0x64, 0x92, 0x8b, 0x38, 0x2b, 0x52, 0x9c, 0x6e,
	0x52, 0x7c, 0xa1, 0x6d, 0xff, 0xb3, 0x01, 0xbd, 0xc3, 0x94, 0x98, 0xa4, 0xe7, 0xa5, 0x8a, 0x21,
	0x9d, 0x2e, 0x29, 0x93, 0x78, 0x0f, 0xba, 0x65, 0x28, 0xdb, 0xf0, 0x8c, 0x60, 0x7b, 0x7c, 0x65,
	0xc8, 0x12, 0x3e, 0xac, 0x7c, 0x53, 0x49, 0x45, 0x84, 0x4e, 0xcc, 0x16, 0x64, 0x6f, 0x78, 0x46,
	0xb0, 0x15, 0xaa, 0xdf, 0x78, 0x03, 0xba, 0x22, 0x9d, 0xb3, 0x98, 0xbf, 0x51, 0xbc, 0xa6, 0x13,
	0xdb, 0xf4, 0x8c, 0xc0, 0x0c, 0x2b, 0x5e, 0x0c, 0xe0, 0x52, 0x4c, 0xf2, 0xb5, 0x48, 0x5f, 0xe5,
	0x20, 0x94, 0x4e, 0x27, 0x76, 0x47, 0x25, 0x56, 0xdd, 0xfe, 0x63, 0x70, 0xeb, 0x3b, 0xc8, 0x12,
	0x11, 0x67, 0x84, 0x03, 0xb8, 0x5c, 0xe6, 0x35, 0x9d, 0xa8, 0x26, 0xb6, 0xc2, 0x0b, 0x7e, 0xff,
	0x11, 0xd8, 0x47, 0x24, 0xeb, 0xa5, 0x58, 0xa7, 0xce, 0x77, 0x03, 0xf6, 0x6b, 0x0a, 0x69, 0x46,
	0xff, 0xbe, 0xa8, 0xe8, 0xc2, 0xd6, 0xb1, 0x12, 0xf5, 0xe4, 0x81, 0xb4, 0x37, 0x15, 0xd4, 0x6f,
	0x47, 0x1e, 0x5d, 0x26, 0x27, 0x3a, 0x6a, 0x15, 0xd1, 0x5f, 0x0e, 0x3f, 0x86, 0xde, 0x0b, 0x65,
	0xfc, 0x9d, 0x91, 0xf2, 0xfb, 0xe0, 0xd6, 0xe3, 0x15, 0x72, 0xfb, 0x53, 0xe8, 0x4d, 0x28, 0xa2,
	0x26, 0x3e, 0xeb, 0xbc, 0x6b, 0x1f, 0xdc, 0xfa, 0x52, 0x1a, 0xea, 0x14, 0xf6, 0x9f, 0xf0, 0xac,
	0x61, 0x80, 0x76, 0x60, 0x33, 0xe2, 0x0b, 0x2e, 0x55, 0x75, 0x33, 0x2c, 0x0c, 0xbc, 0x0a, 0x96,
	0x98, 0xcd, 0x32, 0x92, 0xaa, 0x27, 0x33, 0xd4, 0xd6, 0xaa, 0x6f, 0xea, 0x7f, 0x35, 0x00, 0xcb,
	0x78, 0x4f, 0x49, 0xb2, 0x75, 0xba, 0xfa, 0x0f, 0x46, 0x6a, 0x01, 0x4e, 0x9d, 0xae, 0x7a, 0x9f,
	0xfa, 0x00, 0x52, 0x48, 0x16, 0x1d, 0x8a, 0x65, 0x7c, 0xae, 0xee, 0x1f, 0x1e, 0x1c, 0x81, 0x95,
	0x52, 0xb6, 0x8c, 0x72, 0x89, 0xcd, 0x60, 0x7b, 0xbc, 0x57, 0x33, 0x69, 0xb9, 0x68, 0xa1, 0x4e,
	0x1b, 0xff, 0xe8, 0xc0, 0x6e, 0x39, 0xac, 0x2d, 0x14, 0x60, 0x15, 0xc7, 0x06, 0x3d, 0x55, 0xa4,
	0xe5, 0x76, 0x3a, 0xd7, 0x5b, 0x32, 0xf4, 0xbc, 0x78, 0x1f, 0xbe, 0x7c, 0xfb, 0xb4, 0xe1, 0xf8,
	0xbb, 0xea, 0x5c, 0xeb, 0x87, 0xb9, 0x79, 0x7e, 0xa3, 0xef, 0x1a, 0x03, 0x3c, 0x03, 0xf3, 0x88,
	0x24, 0x1e, 0xa8, 0x5a, 0x4d, 0xb7, 0xc9, 0xe9, 0x37, 0x85, 0x35, 0xce, 0x2d, 0x85, 0x33, 0xc0,
	0xa0, 0x16, 0x67, 0xf4, 0xb6, 0x3a, 0x12, 0xef, 0xf0, 0xa3, 0x01, 0x56, 0xb1, 0x55, 0xba, 0xd3,
	0x96, 0x95, 0xd6, 0x9d, 0xb6, 0x2e, 0xe1, 0x43, 0xc5, 0xe0, 0xbe, 0x73, 0x67, 0x25, 0x06, 0xc3,
	0x0b, 0x84, 0x72, 0x2d, 0xde, 0x83, 0x55, 0x6c, 0x9f, 0xa6, 0xd4, 0xb2, 0xd5, 0x9a, 0x52, 0xeb,
	0xb2, 0x6a, 0x51, 0x06, 0xab, 0x8b, 0x32, 0x83, 0x4e, 0x3e, 0x86, 0x58, 0xc8, 0xdd, 0xb8, 0xe9,
	0xce, 0xb5, 0xc6, 0xb8, 0x86, 0x3e, 0x50, 0xd0, 0x7b, 0x58, 0xff, 0xee, 0x2f, 0x2d, 0xf5, 0xe7,
	0x7c, 0xfb, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x51, 0xd0, 0xb1, 0xe7, 0x07, 0x00, 0x00,
}
